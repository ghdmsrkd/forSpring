## DB 설정 (hikari CP란?)
#spring.datasource.hikari.driver-class-name = oracle.jdbc.OracleDriver
#spring.datasource.hikari.jdbc-url=jdbc:oracle:thin:@127.0.0.1:1529:xe
#spring.datasource.hikari.username=hr
#spring.datasource.hikari.password=spring
#spring.datasource.hikari.connection-timeout=10000
#spring.datasource.hikari.validation-timeout=10000
#spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL

##################
# DB 설정 (log 출력)#
##################
spring.datasource.hikari.driver-class-name = net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.hikari.jdbc-url=jdbc:log4jdbc:oracle:thin:@127.0.0.1:1529:xe
spring.datasource.hikari.username=hr
spring.datasource.hikari.password=spring
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.validation-timeout=10000
spring.datasource.hikari.connection-test-query=SELECT 1 FROM DUAL

#########
# 포트 설정#
#########
server.port=18080

##################################
# 카멜표기 표기법 - 스네이크 표기법 매핑설정#
#################################
mybatis.configuration.map-underscore-to-camel-case=true

spring.thymeleaf.cache=false
spring.resources.cache.period=0

#########
#JPA 설정#
#########
## 자동으로 처리할 DDL 종류 선택
##초기에는 create 로진행하다가 안정기에는 update사용
##update는 변경부분만 수정
#spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update 

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

## 사용할 DB 선택 - 오라클 선택
spring.jpa.database=oracle
#spring.jpa.database=mysql
#오라클 11g를 사용하더라도  하이버네이트에서 제공하는 안정적인 10g 언어 사용
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
#MySQL용
#spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect

##JPA 엔티티 연관관계를 바탕으로 테이블 생성과 같은 스크립트 자동으로 실행
spring.jpa.generate-ddl=false
spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.show_sql=true

##SQL 로그 설명
logging.level.org.hibernate.type.descriptor.sql=trace

##하이버네이트의 새로운 ID 생성 옵션의 사용 여부 설정
spring.jpa.hibernate.use-new-id-generator-mappings=false

## 보안 로그 레벨 설정
logging.levl.org.springframework.security = debug


# 강의 등록 또는 form에서 대용량 데이터 전송시
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB













